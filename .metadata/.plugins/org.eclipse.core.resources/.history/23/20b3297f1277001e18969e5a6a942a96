package com.CodewithblogApplication.services.Impl;

import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.CodewithblogApplication.Entity.Category;
import com.CodewithblogApplication.exceptions.ResourceNotFoundException;
import com.CodewithblogApplication.payLoads.CategoryDto;
import com.CodewithblogApplication.repositories.CategoryRepository;
import com.CodewithblogApplication.services.CategoryServiceI;

@Service
public class CategoryServiceImpl implements CategoryServiceI {
	
	@Autowired
	private CategoryRepository categoryRepository;
	
	@Autowired
	private ModelMapper modelMapper;

	@Override
	public CategoryDto createCategory(CategoryDto categoryDto) {
		Category category=modelMapper.map(categoryDto, Category.class);
		Category createcategory = categoryRepository.save(category);
		return modelMapper.map(createcategory, CategoryDto.class);
	}

	@Override
	public CategoryDto updateCategory(CategoryDto categoryDto, Integer categoryId) {
		
		Category cat = categoryRepository.findById(categoryId).orElseThrow(() ->
		                          new ResourceNotFoundException("Category","category Id",categoryId));
		
		cat.setCategoryId(categoryDto.getCategoryId());
		cat.setCotegoryTitle(categoryDto.getCategoryTitle());
		cat.setCategoryDescription(categoryDto.getCategoryDescription());
		Category updatedcategory = categoryRepository.save(cat);
		
		return modelMapper.map(updatedcategory, CategoryDto.class);
	}

	@Override
	public CategoryDto getCategory(Integer categoryId) {
		Category cat = categoryRepository.findById(categoryId)
				.orElseThrow(() -> new ResourceNotFoundException("Category", "category id", categoryId));
		return modelMapper.map(cat, CategoryDto.class);
	}

	@Override
	public List<CategoryDto> getcategories() {
		List<Category> categories = categoryRepository.findAll();
		List<CategoryDto> listOfcategory = categories.stream().map(cat -> modelMapper.map(cat, CategoryDto.class)).collect(Collectors.toList());
		return modelMapper.map(listOfcategory, CategoryDto.class);
	}

	@Override
	public void deleteCategory(Integer categoryId) {
		
		Category cat = categoryRepository.findById(categoryId).orElseThrow(() ->new ResourceNotFoundException("Category","categiry Id", categoryId));
		categoryRepository.deleteById(categoryId);
	}

}
